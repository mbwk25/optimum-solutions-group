name: Performance Monitoring & Regression Detection

on:
  # Run on every push to main and develop branches
  push:
    branches: [ main, develop ]
  
  # Run on pull requests
  pull_request:
    branches: [ main, develop ]
  
  # Run on schedule (daily at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to test (optional, defaults to production)'
        required: false
        type: string
      runs:
        description: 'Number of Lighthouse runs'
        required: false
        default: '3'
        type: string
      fail_on_regression:
        description: 'Fail if performance regression detected'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  LIGHTHOUSE_CI_VERSION: '0.12.0'

jobs:
  # =============================================
  # Performance Audit Job
  # =============================================
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    
    outputs:
      performance-score: ${{ steps.audit.outputs.performance-score }}
      accessibility-score: ${{ steps.audit.outputs.accessibility-score }}
      best-practices-score: ${{ steps.audit.outputs.best-practices-score }}
      seo-score: ${{ steps.audit.outputs.seo-score }}
      lcp-score: ${{ steps.audit.outputs.lcp-score }}
      fid-score: ${{ steps.audit.outputs.fid-score }}
      cls-score: ${{ steps.audit.outputs.cls-score }}
      regression-detected: ${{ steps.regression.outputs.regression-detected }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @lhci/cli@${{ env.LIGHTHOUSE_CI_VERSION }}

    - name: Build Application
      run: |
        npm run build
        
    - name: Start Test Server
      run: |
        npm run preview &
        npx wait-on http://localhost:4173 -t 30000
      
    - name: Run Performance Benchmark
      id: audit
      run: |
        # Determine URL to test
        TEST_URL="${{ github.event.inputs.url }}"
        if [ -z "$TEST_URL" ]; then
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TEST_URL="https://optimum-solutions-group.vercel.app"
          else
            TEST_URL="http://localhost:4173"
          fi
        fi
        
        # Run our custom performance benchmark script
        RUNS="${{ github.event.inputs.runs || '3' }}"
        node scripts/performance-benchmark.js audit \
          --url "$TEST_URL" \
          --runs "$RUNS" \
          --output "performance-report.json" \
          --format json \
          --ci-mode \
          --upload-results
          
        # Extract scores for outputs
        echo "performance-score=$(jq -r '.audits.performance.score // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "accessibility-score=$(jq -r '.audits.accessibility.score // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "best-practices-score=$(jq -r '.audits."best-practices".score // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "seo-score=$(jq -r '.audits.seo.score // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "lcp-score=$(jq -r '.audits."largest-contentful-paint".numericValue // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "fid-score=$(jq -r '.audits."max-potential-fid".numericValue // 0' performance-report.json)" >> $GITHUB_OUTPUT
        echo "cls-score=$(jq -r '.audits."cumulative-layout-shift".numericValue // 0' performance-report.json)" >> $GITHUB_OUTPUT

    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.sha }}
        path: |
          performance-report.json
          lighthouse-report.html
        retention-days: 30

    - name: Regression Detection
      id: regression
      run: |
        # Check for regressions against baseline
        REGRESSION_RESULT="false"
        
        if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.event.inputs.fail_on_regression }}" = "true" ]; then
          # Download baseline if it exists
          if [ -f "performance-baseline.json" ]; then
            node scripts/performance-benchmark.js compare \
              --baseline performance-baseline.json \
              --current performance-report.json \
              --output comparison-result.json \
              --threshold 10
              
            # Check if regressions were detected
            if [ -f "comparison-result.json" ]; then
              REGRESSIONS=$(jq -r '.regressions | length' comparison-result.json)
              if [ "$REGRESSIONS" -gt 0 ]; then
                REGRESSION_RESULT="true"
                echo "üö® Performance regressions detected!"
                jq -r '.regressions[] | "- \(.metric): \(.change)% worse"' comparison-result.json
              fi
            fi
          fi
        fi
        
        echo "regression-detected=$REGRESSION_RESULT" >> $GITHUB_OUTPUT

    - name: Comment Performance Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let reportData = {};
          let comparisonData = {};
          
          try {
            reportData = JSON.parse(fs.readFileSync('performance-report.json', 'utf8'));
          } catch (e) {
            console.log('No performance report found');
          }
          
          try {
            comparisonData = JSON.parse(fs.readFileSync('comparison-result.json', 'utf8'));
          } catch (e) {
            console.log('No comparison data found');
          }
          
          const performanceScore = Math.round((reportData.audits?.performance?.score || 0) * 100);
          const accessibilityScore = Math.round((reportData.audits?.accessibility?.score || 0) * 100);
          const bestPracticesScore = Math.round((reportData.audits?.['best-practices']?.score || 0) * 100);
          const seoScore = Math.round((reportData.audits?.seo?.score || 0) * 100);
          
          const lcp = Math.round(reportData.audits?.['largest-contentful-paint']?.numericValue || 0);
          const fid = Math.round(reportData.audits?.['max-potential-fid']?.numericValue || 0);
          const cls = (reportData.audits?.['cumulative-layout-shift']?.numericValue || 0).toFixed(3);
          
          let commentBody = `## üéØ Performance Audit Results
          
          ### Lighthouse Scores
          | Category | Score |
          |----------|-------|
          | üöÄ Performance | ${performanceScore}/100 |
          | ‚ôø Accessibility | ${accessibilityScore}/100 |
          | ‚úÖ Best Practices | ${bestPracticesScore}/100 |
          | üîç SEO | ${seoScore}/100 |
          
          ### Core Web Vitals
          | Metric | Value | Status |
          |--------|-------|--------|
          | LCP | ${lcp}ms | ${lcp <= 2500 ? '‚úÖ Good' : lcp <= 4000 ? '‚ö†Ô∏è Needs Improvement' : '‚ùå Poor'} |
          | FID | ${fid}ms | ${fid <= 100 ? '‚úÖ Good' : fid <= 300 ? '‚ö†Ô∏è Needs Improvement' : '‚ùå Poor'} |
          | CLS | ${cls} | ${cls <= 0.1 ? '‚úÖ Good' : cls <= 0.25 ? '‚ö†Ô∏è Needs Improvement' : '‚ùå Poor'} |
          `;
          
          // Add regression analysis if available
          if (comparisonData.regressions && comparisonData.regressions.length > 0) {
            commentBody += `
          ### ‚ö†Ô∏è Performance Regressions Detected
          `;
            comparisonData.regressions.forEach(regression => {
              commentBody += `- **${regression.metric}**: ${regression.change}% worse\n`;
            });
          }
          
          if (comparisonData.improvements && comparisonData.improvements.length > 0) {
            commentBody += `
          ### üéâ Performance Improvements
          `;
            comparisonData.improvements.forEach(improvement => {
              commentBody += `- **${improvement.metric}**: ${Math.abs(improvement.change)}% better\n`;
            });
          }
          
          commentBody += `
          ---
          *Performance audit completed at ${new Date().toISOString()}*
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: Fail on Regression
      if: steps.regression.outputs.regression-detected == 'true' && (github.event.inputs.fail_on_regression == 'true' || github.event_name == 'pull_request')
      run: |
        echo "‚ùå Performance regressions detected! Failing the build."
        exit 1

  # =============================================
  # Accessibility Testing Job
  # =============================================
  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: [performance-audit]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g @axe-core/cli pa11y-ci

    - name: Build Application
      run: npm run build
        
    - name: Start Test Server
      run: |
        npm run preview &
        npx wait-on http://localhost:4173 -t 30000

    - name: Run axe Accessibility Tests
      run: |
        npx axe --dir ./dist --save axe-report.json --reporter json
        
    - name: Run pa11y Accessibility Tests
      run: |
        echo "http://localhost:4173" > urls.txt
        echo "http://localhost:4173/services" >> urls.txt
        echo "http://localhost:4173/solutions" >> urls.txt
        echo "http://localhost:4173/contact" >> urls.txt
        
        pa11y-ci --sitemap-find http://localhost:4173 --sitemap-exclude "*.pdf" --reporter json > pa11y-report.json || true

    - name: Upload Accessibility Reports
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports-${{ github.sha }}
        path: |
          axe-report.json
          pa11y-report.json
        retention-days: 30

  # =============================================
  # Bundle Analysis Job
  # =============================================
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Build and Analyze Bundle
      run: |
        npm run build
        npm run analyze:bundle
        
    - name: Upload Bundle Analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: |
          dist/stats.html
          bundle-analyzer-report.json
        retention-days: 30

    - name: Check Bundle Size
      run: |
        # Check bundle size limits
        node scripts/check-bundle-size.js --limit 300000 --path dist/assets
        
  # =============================================
  # Update Performance Baseline (Main Branch)
  # =============================================
  update-baseline:
    name: Update Performance Baseline
    runs-on: ubuntu-latest
    needs: [performance-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Performance Report
      uses: actions/download-artifact@v4
      with:
        name: performance-report-${{ github.sha }}

    - name: Update Baseline
      run: |
        # Copy current report as new baseline
        cp performance-report.json performance-baseline.json
        
        # Commit and push baseline update
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add performance-baseline.json
        git commit -m "chore: update performance baseline [skip ci]" || exit 0
        git push

  # =============================================
  # Performance Dashboard Deployment
  # =============================================
  deploy-dashboard:
    name: Deploy Performance Dashboard
    runs-on: ubuntu-latest
    needs: [performance-audit, accessibility-audit, bundle-analysis]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Reports
      uses: actions/download-artifact@v4
      with:
        path: ./reports

    - name: Generate Dashboard Data
      run: |
        node scripts/generate-dashboard-data.js \
          --performance ./reports/performance-report-*/performance-report.json \
          --accessibility ./reports/accessibility-reports-*/axe-report.json \
          --bundle ./reports/bundle-analysis-*/bundle-analyzer-report.json \
          --output dashboard-data.json

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dashboard
        force_orphan: true

  # =============================================
  # Notification Job
  # =============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [performance-audit, accessibility-audit, bundle-analysis]
    if: always()
    
    steps:
    - name: Notify Slack on Regression
      if: needs.performance-audit.outputs.regression-detected == 'true'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#performance-alerts'
        text: |
          üö® Performance regression detected in ${{ github.repository }}
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          Performance Score: ${{ needs.performance-audit.outputs.performance-score }}/100
          
          Please review the performance report for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on Success
      if: success() && github.event_name == 'schedule'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#performance-monitoring'
        text: |
          ‚úÖ Daily performance audit completed successfully
          
          Performance Score: ${{ needs.performance-audit.outputs.performance-score }}/100
          Accessibility Score: ${{ needs.performance-audit.outputs.accessibility-score }}/100
          
          All metrics within acceptable thresholds.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================
  # Cleanup Job
  # =============================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [performance-audit, accessibility-audit, bundle-analysis, deploy-dashboard]
    if: always()
    
    steps:
    - name: Delete Old Artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep artifacts for 30 days, delete older ones
          const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
          
          for (const artifact of artifacts.artifacts) {
            if (new Date(artifact.created_at) < thirtyDaysAgo) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }
